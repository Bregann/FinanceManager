// <auto-generated />
using System;
using FinanceManager.Domain.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceManager.Domain.Data.Database.Migrations.Sqlite
{
    [DbContext(typeof(SqliteContext))]
    [Migration("20250725152655_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.AutomaticTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PotId");

                    b.ToTable("AutomaticTransactions");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.EnvironmentalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalSettings");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.HistoricMonthlyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountSaved")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountSpent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HistoricData");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.HistoricPotData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HistoricMonthlyDataId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PotAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PotAmountLeft")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PotAmountSpent")
                        .HasColumnType("TEXT");

                    b.Property<int>("PotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HistoricMonthlyDataId");

                    b.HasIndex("PotId");

                    b.ToTable("HistoricPotData");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.SpendingPot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AmountToAdd")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PotAmount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PotAmountLeft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PotAmountSpent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PotName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pots");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.Transactions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PotId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Processed")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TransactionAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PotId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MonzoAccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MonzoRefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.AutomaticTransaction", b =>
                {
                    b.HasOne("FinanceManager.Domain.Database.Models.SpendingPot", "Pot")
                        .WithMany()
                        .HasForeignKey("PotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pot");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.HistoricPotData", b =>
                {
                    b.HasOne("FinanceManager.Domain.Database.Models.HistoricMonthlyData", "HistoricMonthlyData")
                        .WithMany("HistoricPotData")
                        .HasForeignKey("HistoricMonthlyDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.Database.Models.SpendingPot", "Pot")
                        .WithMany("HistoricPotData")
                        .HasForeignKey("PotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricMonthlyData");

                    b.Navigation("Pot");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.Transactions", b =>
                {
                    b.HasOne("FinanceManager.Domain.Database.Models.SpendingPot", "Pot")
                        .WithMany()
                        .HasForeignKey("PotId");

                    b.Navigation("Pot");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.UserRefreshToken", b =>
                {
                    b.HasOne("FinanceManager.Domain.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.HistoricMonthlyData", b =>
                {
                    b.Navigation("HistoricPotData");
                });

            modelBuilder.Entity("FinanceManager.Domain.Database.Models.SpendingPot", b =>
                {
                    b.Navigation("HistoricPotData");
                });
#pragma warning restore 612, 618
        }
    }
}
